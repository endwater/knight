#include "stdafx.h"
#include "iostream"
#include <iomanip>
#include <cstring>
using namespace std;

void move(int bo[5][5]);
bool spaceValidate(int row, int colume, int step, int bo[5][5], int path);

class Board {
public:
	void print(int bo[5][5]) {
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < 5; j++) {
				cout << setw(3) << bo[i][j];
			}
			cout << endl;
		}
		cout << endl;
	}
};

class Move {
public:
	void moveNumber(int path) {
		switch (path)
		{
		case 1:
			moveRow = -2, moveColume = 1; break;
		case 2:
			moveRow = -1, moveColume = 2; break;
		case 3:
			moveRow = 1, moveColume = 2; break;
		case 4:
			moveRow = 2, moveColume = 1; break;
		case 5:
			moveRow = 2, moveColume = -1; break;
		case 6:
			moveRow = 1, moveColume = -2; break;
		case 7:
			moveRow = -1, moveColume = -2; break;
		case 8:
			moveRow = -2, moveColume = -1; break;
		default:
			break;
		}
	}
	void doMove(int row, int colume, int bo[5][5], int path) {
		moveNumber(path);
		row += moveRow, colume += moveColume;
		if (spaceValidate(row, colume, step, bo, path)) {
			step++;
			bo[row][colume] = step;
			movePath[step] = path;
			if (step != 24) {
				path = 1;
				doMove(row, colume, bo, path);
				path = movePath[step + 1];
			}
			else {
				Board board;
				board.print(bo);
			}
		}
		if(path <= 7){
			moveNumber(path);
			row -= moveRow, colume -= moveColume;
			doMove(row, colume, bo, path + 1);
		}
		else if (path == 8){
			row -= moveRow, colume -= moveColume;
			bo[row][colume] = 0;
			step--;
		}
	} 

private:
	int moveRow = 0, moveColume = 0, step = 0;
	int movePath[24] = { 0 };
};


int main()
{
	Board board;
	int bo[5][5] = { 0 }; 
	board.print(bo);
	bo[0][0] = 25;
	move(bo);
	cout << endl;
	system("pause");
	return 0;
}

void move(int bo[5][5]) {
	int row = 0, colume = 0, path = 1;
	Move knight;
	knight.doMove(row, colume, bo, path);
}

bool spaceValidate(int row, int colume, int step, int bo[5][5], int path) {
	bool validate = true;
	if (row < 0 || row > 4 || colume > 4 || colume < 0) {
		validate = false;
	}
	else if (bo[row][colume] != 0){
		validate = false;
	}
	return(validate);
}
